apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
# ^^^^^^^^^ Takes care of the manifests and Kustomization will either look for kustomization.yaml within the path or if none found generate one that contains all Kubernetes manifests in it. 
metadata:
  name: example-gitops-app
  namespace: flux-system
spec:
  sourceRef:
    kind: GitRepository
    name: example-repo
  interval: 10m
  # interval here means interval after which the source resources to be recomputed and apply it to cluster: https://fluxcd.io/docs/components/kustomize/kustomization/#reconciliation
  path: ./4-gitops/manifests # Path tells where to find the files. Excellent for "monorepos" where you have multiple different applications in one repository, like the example repository.
  prune: true # This will make sure that deleting the file will delete the resource
  validation: client # Who validates the objects. Server or the client.
---
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: GitRepository
metadata:
  name: example-repo
  namespace: flux-system
  # NOTES SAHIL #1
spec:
  interval: 10m
  # url: https://github.com/kubernetes-hy/material-example
  url: https://github.com/sahilrajput03/devopswithkubernetes
  ref:
    # ORIGINALLY 
    # branch: master
    branch: main

  # NOTES SAHIL #1 HERE...
  # FYI(sahil): The `.metadata.name` and `.metadata.namespace` defined here
  # are referenced in other file `example.yml` file which is
  # of `kind: Kustomization`.
  #
  # FYI(sahil): Above defined namespace isn't actually used as namespace in our
  # cluster but it'll be consumed by flux and it'll be defined as label to
  # our deployment (verify via: `kc edit deployments.apps hashgenerator-dep`).
  #
  # FYI(sahil): The label would NOT be assigned to any pod.
  # kustomize.toolkit.fluxcd.io/namespace: flux-system
